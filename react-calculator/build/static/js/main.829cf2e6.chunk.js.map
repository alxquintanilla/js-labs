{"version":3,"sources":["components/header/Header.js","components/button/Button.js","components/input/Input.js","components/button/CircularButton.js","App.js","Calculator.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Button","_this","this","onClick","props","callback","value","show","Input","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","e","childId","target","_this2","type","App","onClickBtn","operation","onClickWriteNumber","numbers","getInputVal","undefined","showResult","concat","opType","state","lastOperation","calc","addition","substraction","multiplication","division","childVals","result","isNumber","Number","parseFloat","saveChildValOnState","childArr","slice","setState","inputValue","header_Header","input_Input","handleInputChange","id","button_Button","CircularButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.829cf2e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"mdl-layout--fixed-header\">\n      <header className=\"mdl-layout__header mdl-layout--fixed-header\">\n        <div className=\"mdl-layout__header-row\">\n          <span className=\"mdl-layout-title\">React Calculator</span>\n          <div className=\"mdl-layout-spacer\"></div>\n        </div>\n      </header>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Button extends Component {\n\n  render() {\n    return (\n      <button className=\" calc_btn mdl-button mdl-js-button mdl-button--raised mdl-button--colored\"\n        onClick={()=>this.props.callback(this.props.value)} >\n        {this.props.show}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\n\nclass Input extends Component {\n  constructor(props){\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e){\n    this.props.callback(this.props.childId, e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"mdl-textfield mdl-js-textfield\">\n        <input className=\"\" type=\"text\" onChange={(e)=>this.onChange(e)}\n            value={this.props.value} />\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from 'react';\n\nclass Button extends Component {\n\n  render() {\n    return (\n     <button className=\"mdl-button--fab mdl-js-button mdl-button--raised mdl-button--colored\"\n        onClick={()=>this.props.callback(this.props.show)} value=\"testValue\">\n        {this.props.show}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header/Header.js';\nimport Button from './components/button/Button.js'\nimport Input from './components/input/Input.js'\nimport CircularButton from './components/button/CircularButton.js'\nimport calc from './Calculator.js';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {childVals : [], calc: calc(), lastOperation: \"=\"};\n  }\n\n  //showing a val on input element\n  showResult(result){\n    this.saveChildValOnState(\"calculator_numberInput\",result)\n  }\n\n  //getting input val\n  getInputVal(){\n    return this.state.childVals['calculator_numberInput'];\n  }\n\n  //saving value on state for child objects/elements\n  saveChildValOnState(childId, value){\n    let childArr = this.state.childVals.slice();\n    let calc = this.state.calc;\n    let lastOperation = this.state.lastOperation;\n\n    childArr[childId] = value;\n    this.setState({ childVals : childArr, calc: calc, lastOperation: lastOperation});\n  }\n\n  onClickBtn = (value) => {\n    this.operation(\"=\");\n  }\n\n  onClickWriteNumber = (value) => {\n    let numbers = this.getInputVal();\n    if(numbers === undefined){\n      numbers = \"\";\n    }else{\n      numbers += \"\";\n    }\n    this.showResult((numbers.concat(value)));\n  }\n\n  operation = (opType) => {\n    let numbers = this.getInputVal();\n    this.state.lastOperation = opType;\n\n    switch (opType) {\n      case '+':\n          this.state.calc.addition(numbers);\n          this.showResult(\"\");\n        break;\n      case '-':\n          this.state.calc.substraction(numbers);\n          this.showResult(\"\");\n        break;\n      case 'x':\n          this.state.calc.multiplication(numbers);\n          this.showResult(\"\");\n        break;\n      case '/':\n          this.state.calc.division(numbers);\n          this.showResult(\"\");\n        break;\n      case '=':\n          if(this.state.lastOperation !== '=')\n            this.operation(this.state.lastOperation)\n          else\n            this.state.calc.addition(\"0\");\n          this.showResult(\"\");\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const inputValue = this.getInputVal();\n\n    return (\n      <div className=\"App\">\n      <div className=\"mdl-layout mdl-js-layout\">\n        <Header />\n\n        <main className=\"mdl-layout__content\">\n          <div className=\"page-content\">\n\n            <Input callback={this.handleInputChange} childId=\"calculator_numberInput\" value={inputValue}/>\n\n            <div id=\"result\"> {this.state.calc.result}</div>\n\n            <Button show=\"1\" value=\"1\" callback={this.onClickWriteNumber}/>\n            <Button show=\"2\" value=\"2\" callback={this.onClickWriteNumber}/>\n            <Button show=\"3\" value=\"3\" callback={this.onClickWriteNumber}/>\n            <Button show=\"4\" value=\"4\" callback={this.onClickWriteNumber}/>\n            <Button show=\"5\" value=\"5\" callback={this.onClickWriteNumber}/>\n            <Button show=\"6\" value=\"6\" callback={this.onClickWriteNumber}/>\n            <Button show=\"7\" value=\"7\" callback={this.onClickWriteNumber}/>\n            <Button show=\"8\" value=\"8\" callback={this.onClickWriteNumber}/>\n            <Button show=\"9\" value=\"9\" callback={this.onClickWriteNumber}/>\n            <Button show=\"0\" value=\"0\" callback={this.onClickWriteNumber}/>\n\n            <br/><br/>\n            <CircularButton show=\"+\" callback={this.operation}/>\n            <CircularButton show=\"-\" callback={this.operation}/>\n            <CircularButton show=\"x\" callback={this.operation}/>\n            <CircularButton show=\"/\" callback={this.operation}/>\n\n            <br/>\n            <br/>\n            <Button show=\"=\" callback={this.onClickBtn}/>\n          </div>\n        </main>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\n//Calculator function that returns an object with methods and variables\nexport default function calc (){\n  return {\n    result: 0,\n\n    addition: function(value){\n      if(this.isNumber(value))\n      this.result+=(Number.parseFloat(value));\n    },\n\n    substraction: function(value){\n      if(this.isNumber(value))\n        this.result-=(Number.parseFloat(value));\n    },\n\n    multiplication: function(value){\n      if(this.isNumber(value))\n        this.result*=(Number.parseFloat(value));\n    },\n\n    division: function(value){\n      if(this.isNumber(value))\n        this.result/=(Number.parseFloat(value));\n    },\n\n    isNumber: function(value){\n      return (value!==\"\");\n    }\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}